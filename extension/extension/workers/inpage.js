const e={uuid:"1234",name:"Quasar",icon:"",rdns:"quasar.tetrationlab.com"},n={accountsChanged:new Set,connect:new Set,disconnect:new Set,chainChanged:new Set,once:{accountsChanged:new Set,connect:new Set,disconnect:new Set,chainChanged:new Set}},t=new Map,s=(e,n=!1,s="request")=>t.size<10?new Promise(((a,r)=>{const c=[...`${Math.random().toString(16)+Date.now().toString(16)}`].slice(2).join("");t.set(c,{resolve:a,reject:r});const o=e.method;["eth_signTypedData","eth_signTypedData_v3","eth_signTypedData_v4"].includes(e.method)&&(e.method=void 0);const d={type:"WALLET_CONTENT",target:"metamask-contentscript",data:{method:o,name:"metamask-provider",data:e,jsonrpc:"2.0",id:Number(c.replace(/[A-Za-z]/g,"").slice(0,10))},resId:c,from:s};n&&(d.type="WALLET_PING"),window.postMessage(d,"*")})):new Promise(((e,n)=>{setTimeout((()=>{n({code:-32e3,message:"ClearWallet: Too many requests",error:!0})}),200)})),a=new Proxy(new class{constructor(){this.isMetaMask=!0,this._state={accounts:Array(1),isConnected:!0,isUnlocked:!0,initialized:!0,isPermanentlyDisconnected:!1},this._sentWarnings={enable:!1,experimentalMethods:!1,send:!1,events:{}},this.chainId="0x89",this.networkVersion="137",this.selectedAddress=null,this.autoRefreshOnNetworkChange=!1,this._events={},this._eventsCount=2,this._jsonRpcConnection={},this._log={},this._maxListeners=100,this._metamask=new Proxy({isUnlocked:()=>Promise.resolve(!0),requestBatch:()=>{}},{}),this._rpcEngine={_events:{},_eventsCount:0,_maxListeners:void 0,_middleware:Array(4)}}isConnected(){return!0}enable(){return s({method:"eth_requestAccounts",params:Array(0)})}request(e){return s(e)}sendAsync(e,n){return"string"==typeof e?s({method:e,params:n},!1,"sendAsync"):"function"!=typeof n?s(e,!1,"sendAsync"):void s(e,!1,"sendAsync").then((t=>{n(void 0,{id:e?.id,jsonrpc:"2.0",method:e.method,result:t})})).catch((t=>{n(new Error(t),{id:e?.id,jsonrpc:"2.0",method:e.method,error:new Error(t)})}))}send(e,n){return(async e=>({id:0,jsonrpc:"2.0",result:await e}))(s(void 0===n?"string"==typeof e?{method:e,params:void 0}:e:"object"==typeof e?e:"string"==typeof e?{method:e,params:n}:e,!1,"send"))}on(e,n){return this.addListener(e,n),this}addListener(e,t){switch(e){case"accountsChanged":n.accountsChanged.add(t);break;case"connect":n.connect.add(t),s({method:"wallet_ready"},!0);break;case"disconnect":case"close":n.disconnect.add(t);break;case"chainChanged":case"chainIdChanged":case"networkChanged":n.chainChanged.add(t)}return this}once(e,t){switch(e){case"accountsChanged":n.once.accountsChanged.add(t);break;case"connect":n.once.connect.add(t),s({method:"wallet_ready"},!0);break;case"disconnect":case"close":n.once.disconnect.add(t);break;case"chainChanged":case"chainIdChanged":case"networkChanged":n.once.chainChanged.add(t)}return this}off(e,n){return this.removeListener(e,n),this}removeListener(e,t){switch(e){case"accountsChanged":n.accountsChanged.delete(t);break;case"connect":n.connect.delete(t);break;case"disconnect":case"close":n.disconnect.delete(t);break;case"chainChanged":case"chainIdChanged":case"networkChanged":n.chainChanged.delete(t);break;default:return}return this}removeAllListeners(){return n.accountsChanged.clear(),n.chainChanged.clear(),n.disconnect.clear(),n.connect.clear(),this}getMaxListeners(){return 100}_getExperimentalApi(){return this._metamask}eventNames(){return[]}listenerCount(){return(()=>{let e=0;for(const t of Object.keys(n))if("once"===t)for(const s of Object.keys(n[t]))e+=n[t][s]?.length;else e+=n[t].length;return e})()}listners(){return[]}rawListners(){return[]}_warnOfDeprecation(){return!0}_rpcRequest(){return!0}_handleAccountsChanged(){return!0}_handleChainChanged(){return!0}_handleConnect(){return!0}_handleDisconnect(){return!0}_handleStreamDisconnect(){return!0}_handleUnlockStateChanged(){return!0}_sendSync(){}},{deleteProperty:()=>!0});window.addEventListener("message",(function(e){if(e.source!=window)return;const s=e?.data,r=e?.data?.data,c=e?.data?.data?.data,o=s?.resId,d=c?.result;if("WALLET_PAGE"===s?.type)try{d?.error?t.get(o).reject(d):t.get(o).resolve(d)}catch(e){t.get(o)?.reject({code:-32e3,message:"Failed to connect resolve msg",error:!0})}else if("WALLET_PAGE_LISTENER"===s?.type&&(r?.listner??"x")in n)try{const e=r.listner;"connect"===e&&r?(a.networkVersion=String(parseInt(c?.chainId??"0x89",16)),a.chainId=c?.chainId??"0x89",a.selectedAddress=r?.address?.[0]??null,a.accounts=[r.address?.[0]]??0,a.isConnected=()=>!0):"chainChanged"===e?(a.networkVersion=String(parseInt(c??"0x89",16)),a.chainId=r??"0x89"):"accountsChanged"===e&&(a.accounts=[r?.[0]]??0,a.selectedAddress=r?.[0]??""),n[e].forEach((e=>e(c))),n.once[e].forEach((t=>{t(r),n.once[e].delete(t)}))}catch(e){}!t.has(o)||"WALLET_PAGE"!==s?.type&&"WALLET_PAGE_LISTENER"!==s?.type||t.delete(o)})),Object.defineProperties(a,{selectedAddress:{enumerable:!1},chainId:{enumerable:!1},networkVersion:{enumerable:!1}});const r={currentProvider:a,__isMetaMaskShim__:!0};var c;c=window,Object.defineProperty(c,"ethereum",{value:a}),Object.defineProperty(c,"web3",{value:r}),s({method:"wallet_ready"},!0),function(n){function t(){const t=e;window.dispatchEvent(new CustomEvent("eip6963:announceProvider",{detail:Object.freeze({info:t,provider:n})}))}window.addEventListener("eip6963:requestProvider",(e=>{t()})),t()}(a);